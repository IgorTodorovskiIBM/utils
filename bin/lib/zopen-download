#!/bin/sh
# Downloads and extracts the latest ZOSOpenTools releases from GitHub

export utildir="$( cd "$(dirname "$0")" >/dev/null 2>&1 && pwd -P )"

. "${utildir}/common.inc"

printSyntax() 
{
  args=$*
  echo "zopen-download is a tool that downloads and extracts the latest z/OS Open Tools releases from GitHub Releases." >&2
  echo "If you have a Github OAUTH token, export the environment variable ZOPEN_GIT_OAUTH_TOKEN" >&2
  echo "Syntax: zopen-download [<option>]*" >&2
  echo "  where <option> may be one or more of:" >&2
  echo "  --list: list all available z/OS Open Tools"  >&2
#TODO: future option
#  echo "  --filter <color>: filter based on quality (green - all tests passing, blue - most tests passing, yellow - some tests passing, red - no tests passing, none (default))"  >&2
  echo "  -d <dir>: directory to download binaries to.  Uses current working directory if not specified." >&2
  echo "  -r <repo>: specific repo name to download. Downloads all ZOSOpenTools if not specified." >&2
}

args=$*
download=$PWD
filter=none
while [[ $# -gt 0 ]]; do
  case "$1" in
    "-d")
      download=$2;
      shift
      ;;
    "-r")
      toolrepo=$2;
      shift
      ;;
    "--list")
      list=1;
      ;;
    "--filter")
      filter=$2;
      ;;
    "-h" | "--h" | "-help" | "--help" | "-?" | "-syntax")
      printSyntax "${args}"
      exit 4
      ;;
    *)
      printError "Unknown option ${1} specified"
      ;;
  esac
  shift;
done

if [ ! -z "${ZOPEN_GIT_OAUTH_TOKEN}" ]; then
  OAUTH_TOKEN_OPTION='-H'
  OAUTH_TOKEN="Authorization: Bearer ${ZOPEN_GIT_OAUTH_TOKEN}" 
fi

getContentsFromGithub()
{
  url=$1
  if ! repo_results=$(curl $OAUTH_TOKEN_OPTION "$OAUTH_TOKEN" -k -s "$url"); then
    printError "curl command could not download $url"
  fi
  
  if echo $repo_results | grep -q "API rate limit exceeded for"; then
    printError "API rate limit exceeded for github.\n1. Generate a token (https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).\n2. Set ZOPEN_GIT_OAUTH_TOKEN and rerun"
  fi
  echo "$repo_results";
}

if ! repo_results="$(getContentsFromGithub "https://api.github.com/users/ZOSOpenTools/repos?per_page=100")"; then
  exit 4;
fi
repo_results=$(echo "$repo_results" | grep "\"full_name\":" | cut -d '"' -f 4)

if [ ! -z "$list" ]; then
  printf "${NC}${UNDERLINE}${1}%-25s %-25s %-25s\n${NC}" "Repo" "Build Status" "Quality Report"
fi

if [ ! -d "${download}" ]; then
  mkdir -p "${download}"
fi

if [ ! -z "${download}" -a -d "${download}" ]; then
  cd "${download}"
fi

foundPort=false
for repo in $(echo ${repo_results}); do
  repo=${repo#"ZOSOpenTools/"}
  if [ -z $toolrepo ] || [ "${toolrepo}" = "${repo}" ]; then
    name=${repo%port}
    if [ "${repo}" = "${name}" ]; then
      continue;
    fi
    if [ ! -z "$list" ]; then
      if ! contents="$(getContentsFromGithub "https://api.github.com/repos/ZOSOpenTools/${repo}/releases/latest")"; then
        exit 4;
      fi
      statusline="$(echo "$contents" | grep "\"body\":.*Test Status:.*(.*)<br />")"
      buildQuality="$(echo "$statusline" | sed -e "s#.*Test Status:<\/b>##" -e "s#[ ]*(.*##" | tr -d ' ')"
      testStatus="$(echo "$statusline" | sed -e "s#.*Test Status:<\/b>[^(]*(##" -e "s#).*##")"
      if [ -z "$buildQuality" ]; then
        buildQuality="Untested"
        testStatus="N/A";
      fi
      printf '%-25s %-25s %-25s\n' "$repo" "$buildQuality" "$testStatus"
      continue;
    fi
    foundPort=true
    printHeader "Downloading latest release from $repo"
    if ! latest_url="$(getContentsFromGithub "https://api.github.com/repos/ZOSOpenTools/${repo}/releases/latest")"; then
      exit 4;
    fi
    latest_url="$(echo "$latest_url" | grep browser_download_url | cut -d '"' -f 4)"

    if [ -z $latest_url ]; then
      printWarning "No releases published for $repo"
      continue
    fi

    if ! curl -k -L ${latest_url} -O 2>/dev/null; then
      printError "Could not download ${latest_url}"
    fi

    pax=$(basename ${latest_url})
    if [ ! -f "${pax}" ]; then
      printError "${pax} was not actually downloaded?"
    fi

    printHeader "Extracting $pax"
    if ! pax -rf $pax -p p 2>/dev/null; then
      printWarning "Could not extract $pax. Skipping"
      continue;
    fi
    rm -f "${pax}"
    dirname=${pax%.pax.Z}
    if [ -L $name ]; then
      rm $name
    fi 
    if ! ln -s $dirname $name; then
      printError "Could not create symbolic link name"
    fi 
  fi
done

if ! $foundPort && test -z $list; then
  printError "Could not find $toolrepo. Run with --list option to view the available ports"
fi
