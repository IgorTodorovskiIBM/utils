#!/bin/sh
# Generates a zopen compatible project

export utildir="$( cd "$(dirname "$0")" >/dev/null 2>&1 && pwd -P )"

. "${utildir}/common.inc"

printSyntax() 
{
  args=$*
  echo "zopen-generate will generate a zopen compatible project" >&2
  echo "Syntax: zopen-generate" >&2
}

printHeader "Generate a zopen project"
echo "What is the project name?"
name=$(getInput)
echo "Provided a description of the project:"
description=$(getInput)
echo "Provide a url link to the license contents: (e.g. https://raw.githubusercontent.com/mirror/make/master/COPYING). (if none, press enter)"
license_url=$(getInput)
echo "Enter ${name}'s Git location: (if none, press enter)"
gitpath=$(getInput)
echo "Enter ${name}'s build dependencies for the Git source: (example: curl make)"
gitdeps=$(getInput)
echo "Enter ${name}'s Tarball location? (if none, press enter)"
tarpath=$(getInput)
echo "Enter ${name}'s build dependencies for the Tar source: (example: curl make)"
tardeps=$(getInput)
echo "Enter the default build type: (tar or git)"
buildtype=$(getInput)

project_path="${name}port"

if [ -d $project_path ]; then
  echo "Directory $project_path already exists. Clobber it? (y, n)"
  clobber=$(getInput)
  if [ "$clobber" = "y" ]; then
    rm -rf $project_path
  else
    exit 0
  fi
fi

printHeader "Generating $project_path zopen project"
mkdir -p ${name}port/patches

# Download external LICENSE
if [ ! -z "${license_url}" ]; then
  if ! curl -k -L -0 -o "${name}port/patches/LICENSE" "${license_url}" 2>/dev/null; then
    printError "Could not download ${license_url}"
  fi
  printInfo "${name}port/patches/LICENSE.md created"
fi

buildenv="${name}port/buildenv"

if [ ! -z "$gitpath" ]; then
  echo "export ZOPEN_GIT_URL=\"$gitpath\"" >> $buildenv
fi
if [ ! -z "$gitdeps" ]; then
  echo "export ZOPEN_GIT_DEPS=\"$gitdeps\"" >> $buildenv
fi

if [ ! -z "$tarpath" ]; then
  echo "export ZOPEN_TARBALL_URL=\"$tarpath\"" >> $buildenv
fi
if [ ! -z "$tardeps" ]; then
  echo "export ZOPEN_TARBALL_DEPS=\"$tardeps\"" >> $buildenv
fi

if [ ! -z "$buildtype" ] && [ "$buildtype" = "git" ]; then
  echo "export ZOPEN_TYPE=\"GIT\"" >> $buildenv
else
  echo "export ZOPEN_TYPE=\"TARBALL\"" >> $buildenv
fi

cat <<EOT >> $buildenv

zopen_check_results()
{
  dir="\$1"
  pfx="\$2"
  chk="\$1/\$2_check.log"

  # Echo the following information to guage build health
  echo "actualFailures:0"
  echo "totalTests:1"
  echo "expectedFailures:0"
}

zopen_append_to_env()
{
  # echo envars outside of PATH, MANPATH, LIBPATH
}
EOT
printInfo "$buildenv created"

cat <<EOT >> "${name}port/README.md"
${name}

${description}
EOT
printInfo "${name}port/README.md created"

cat <<EOT >> "${name}port/cicd.groovy"
node('linux')
{
  stage('Build') {
    build job: 'Port-Pipeline', parameters: [string(name: 'PORT_GITHUB_REPO', value: 'https://github.com/ZOSOpenTools/${name}port.git'), string(name: 'PORT_DESCRIPTION', value: '${description}' )]
  }
}
EOT
cp "${utildir}/../../LICENSE" "${name}port/LICENSE"
printHeader "${name} project is ready!"
printInfo "Create patches under the ${name}port/patches directory"
printInfo "Run zopen build to build ${name}port"
printInfo "Contact Mike Fulton (fultonm@ca.ibm.com) to create https://github.com/ZOSOpenTools/${name}port.git"
